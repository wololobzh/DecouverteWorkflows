# ======================================================================================
# Nom du workflow tel qu’il apparaîtra dans l’onglet “Actions” de GitHub
# ======================================================================================
name: Deploy static site to GitHub Pages

# ======================================================================================
# SECTION : Déclencheur du workflow
# Ici, le workflow sera exécuté automatiquement à chaque "push" sur la branche "main".
# Autrement dit, dès que tu fais un "git push origin main", GitHub lancera ce workflow.
# ======================================================================================
on:
  push:
    branches: ["main"]  # La liste des branches concernées par le déclenchement

# ======================================================================================
# SECTION : Permissions du workflow
# Ces permissions contrôlent ce que le workflow est autorisé à faire.
# - contents: read → il peut lire le contenu du dépôt (pour copier les fichiers).
# - pages: write → il peut écrire sur GitHub Pages (pour déployer le site).
# - id-token: write → nécessaire pour authentifier le déploiement de manière sécurisée.
# ======================================================================================
permissions:
  contents: read
  pages: write
  id-token: write

# ======================================================================================
# SECTION : Concurrence
# Ce bloc permet d’éviter que plusieurs déploiements s’exécutent en même temps.
# - group: "pages" → nom symbolique du groupe (ici “pages” pour GitHub Pages)
# - cancel-in-progress: true → si un nouveau déploiement démarre, il annule le précédent.
# Cela évite les conflits ou les déploiements multiples inutiles.
# ======================================================================================
concurrency:
  group: "pages"
  cancel-in-progress: true

# ======================================================================================
# SECTION : Définition des jobs (tâches)
# Un “job” est un ensemble d’étapes exécutées sur un environnement donné.
# Ici, on n’a qu’un seul job nommé “deploy”.
# ======================================================================================
jobs:
  deploy:  # Nom du job

    # ------------------------------------------------------------------------------
    # Environnement cible
    # - name: github-pages → l’environnement logique associé au déploiement
    # - url: référence à l’URL de ton site générée automatiquement par GitHub Pages
    #   (elle sera visible dans la console une fois le déploiement terminé)
    # ------------------------------------------------------------------------------
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # ------------------------------------------------------------------------------
    # Système sur lequel le job va tourner
    # “ubuntu-latest” = une machine virtuelle Linux Ubuntu, maintenue par GitHub
    # ------------------------------------------------------------------------------
    runs-on: ubuntu-latest

    # ------------------------------------------------------------------------------
    # SECTION : Steps (étapes du job)
    # Chaque étape est exécutée dans l’ordre, sur la même machine virtuelle.
    # ------------------------------------------------------------------------------
    steps:
      # ============================================================================
      # ÉTAPE 1 : Récupérer le code du dépôt
      # ----------------------------------------------------------------------------
      # uses: actions/checkout@v4 → action officielle de GitHub qui clone ton dépôt
      # dans l’environnement de travail du workflow (la VM Ubuntu).
      # Sans cette étape, GitHub n’aurait aucun fichier à déployer.
      # ============================================================================
      - name: Checkout code
        uses: actions/checkout@v4

      # ============================================================================
      # ÉTAPE 2 : Préparer les fichiers à déployer
      # ----------------------------------------------------------------------------
      # uses: actions/upload-pages-artifact@v3 → action officielle qui crée un “artifact”.
      # Un artifact est un paquet temporaire (zip) contenant les fichiers à publier.
      #
      # with:
      #   path: . → indique le dossier à inclure dans le déploiement.
      #   Ici, le point (.) signifie la racine du dépôt.
      #   Comme ton index.html est directement à la racine, c’est parfait.
      #
      # Si ton site se trouvait dans un sous-dossier (ex: "dist" ou "build"),
      # tu mettrais "path: ./dist" ou "path: ./build"
      # ============================================================================
      - name: Upload static files
        uses: actions/upload-pages-artifact@v3
        with:
          path: .  # Ton fichier index.html et les éventuels CSS/JS sont à la racine

      # ============================================================================
      # ÉTAPE 3 : Déploiement sur GitHub Pages
      # ----------------------------------------------------------------------------
      # uses: actions/deploy-pages@v4 → action officielle qui récupère l’artifact
      # créé à l’étape précédente et le publie automatiquement sur GitHub Pages.
      #
      # id: deployment → identifiant de l’étape pour y faire référence plus haut
      # (dans environment.url: ${{ steps.deployment.outputs.page_url }})
      #
      # Une fois exécutée :
      # - GitHub Pages génère ton site
      # - l’URL de ton site est affichée dans la console
      # - tu peux le visiter à :
      #   https://<ton-username>.github.io/<nom-du-repo>/
      # ============================================================================
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
